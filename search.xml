<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[reading-notes-on-moduo]]></title>
    <url>%2F2018%2F06%2F14%2Freading-notes-on-moduo%2F</url>
    <content type="text"><![CDATA[ding notes on Moduo(1) Moduo: A C++ non-blocking network library for multi-threaded server in Linux. C++ 11 featuresa. functional, bindin C++11, function declartion can be: 123456789 return-type func(args)//or auto func(args) -&gt; return_type// the good part of &quot;-&gt;&quot; is to use &quot;decltype&quot; to decide the return type from future. std::function&lt;return_type(arg1_type, arg2_type..)&gt; ; [](type1, type2..)&#123;&#125; ; //lambda func, anonymous func std::forward std::bind() is used to assign existed variables to func parameters during compile-time, and unassigned parameters stand as placeholders, which then replace by real parameters during running-time, and return a new func. bind() can be used to bind static func, global func, class member func. 123456789 std::bind(global_func, 1.0, _2) ; std::bind(&amp;class:memberfunc, classPointer[this], _1); ``` ### b. multi-threads synchronized primitives Q: what is condition variable ? A: used to block one or more threads, till been notified by another thread or overtime been wakeup. But if all threads are waiting, that&apos;s a problem, so at least for one thread, the condition_variable should be true. threadA.wait(condition_variable); while(;;) { threadB.do(); } threadB.notify(); threadA.do(); 12345678910111213141516171819202122232425 Q: what is mutex? A: it works like a lock, to block any other thread to access special part of memory, at any time, only one thread can own the mutex. in reality, to define mutexLock class will manage lock/unlock automatically due to the constructor/destructor of the object. ### c. rvalue reference, universal reference, std::forward Q: why need right-value reference ? A: to use rvalue like lvalue, save object/variable copying, the detail is about move constructor. universal reference, means either rvalue reference or lvalue reference, is to declare a variable /parameter with type T&amp;&amp; for some deduced type T### d. functional template, variadic arguments basically, it&apos;s to support any type, any number of parameters in function template. ``` template&lt;typename… Args&gt; class tuple&#123;&#125; //a template class template&lt;typename T, typename… Args&gt; void func()&#123;&#125; /* Args :: a template type parameter pack, a list of parameters T :: a normal template type parameter */ func(T, args...) /* (...) at right of func parameters is meta operator used to unpack &quot;args&quot; into separate arguments */ a simple thread / thread pool libtake a look at: thread-pool basically, a task queue to store all todo tasks; a thread pool, to store the worker threads, each of which takes one task from the task queue continuously till the queue empty. racing condition happens when two threads try to take the same task simultaneously, so mutex. and all operators requrieing thread-safe should use mutex, e.g. enqueue/dequeue taskthen callback functors, how each worker thread deal with the task at hand? to design function template with variadic arguments. a simple Tcp network libtake a look at: simpleNetwork in server: socket() -&gt; bind() -&gt; listen() -&gt; accept() –&gt; send()/write() in client: socket() -&gt; connect() -&gt; recv()/send() a basic idea is that each connection, the server will create a new thread to handle it. But it consume server quickly. I/O nonblocking/event-driven &amp; multiplex1234567891011#include &lt;poll.h&gt; struct pollfd &#123;int fd; //file descriptor, non-negativeshort events; //events to watch, set by usershort revents; //returned events, return from system kernel &#125;;POLLIN | POLLPRI ; //event readPOLLOUT | POLLWRBAND ; //event writePOLLER ; //event errorPOLLHUP ; //event hang up the basic idea of multplex(Linux APIs: poll(), epoll()) is to use one single thread to listen many connections/socket/fd, once any socket is ready for I/O, the thread will execute the write/read callback. epoll() on success, return the number of revents or 0; on error return -1 123456789struct epoll_event &#123; __u32 events ; union&#123; void* ptr, //if need to store a pointer int fd, // if need to store socket fd __u32 u32, // to store general 32 bit number __u64 u64 // to store general 64 bit number &#125; data;&#125;;]]></content>
      <tags>
        <tag>c++11</tag>
        <tag>Moduo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[coding is the system engineering]]></title>
    <url>%2F2018%2F06%2F05%2Fcoding-is-the-system-engineering%2F</url>
    <content type="text"><![CDATA[during this week studying: automotive message broker. It’s a framework to support in-vehicle network communication, based on which many vehicle applications can build up. After jumped into the source code, soonly I found the dependent third-party libs, e.t. Qt, Glib, libwebsockets. None of these basis libs looks familiar, that’s really headache. So had to jump to learn a little about these libs first. Qt is heavy, give up on reading source code, basically to know what’s used for; Glib has a core on eventloop, after review the concept: nonblocking event I/O; and few lighter projects are found, e.g. event.js in RocketEngine. so I was happy to read js source code, but after reading nothing really keep in my head due to don’t know where to use them, neither don’t understand why these implement is necessary. maybe a bigger project with more details, so picked moduo, written by a Chinese. there is a book on this project, which started with multi-thread programming issues, no help. same problem, I am not familar with the application scenario, so can’t really catch the essential. back to the question: how to effciently read source code?1) I suppose, first to understand the application scenario2) compile and run in debug to track the data flow for projects, which you can’t see the flow by once3) if it’s a framework/foundmental libs, write demo The company IT system is not developer-friendly, git, cmake, npm, python lib are missing. that’s maybe the reason I am becoming lazy, if tools at-hand, may give a try; if not, nothing really do. The company has itself gmake system, but the bottom code never been touched. Then I compiled the demo libwebsocket, many failures bump out, during school time, I used a lot cmake, g++ with local headers, link to LD/_LIBRARY/_PATH, all out of practice for couple years. Anyway, at this moment, I realize that coding is a system enginnering. first to be really familar with OS, then the basic libs, then think about to write applications. For me, the first occupy with software is from (industry) application layer, lack of foundmental. now when to do sth, I feel hands are bounded, that push me to the root. Rome is not built in one day, OMG.]]></content>
      <tags>
        <tag>amb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[open source project checked]]></title>
    <url>%2F2018%2F05%2F31%2Fopen-source-project-checked%2F</url>
    <content type="text"><![CDATA[pen source projects I scatched To review how many open source projects I tried to study has been in my mind for a long time. I am always interested in new areas, new trends, and want to understand a little more, few contribution by now. One college friend, who worked at Intel China, first brought me to GTC 2008 at Beijing, where my eyes is opened first time, to know there is so many amazing works around the world. 1) HPC/FEA/CFDafter 2008, I was driven by computing mechanics more HPCG: a benchmark work to test FLOPs, which I used as a class project at Buffalo PETSC: a large sparse matrix solver, developed from Texas Austin, also met at Buffalo. the math is attracted me more and it is complex and a good learning material for C++ LibMesh: based on PETSC to do FEM. ran some demo and interested in math more GPU-SPH: GPU implementd of SPH(CFD algorithm), during 2011, GPU is popular in applied mechanics. PetIBM: immersed boundary method (CFD algorithm), used as a class project OpenFEM, OpenFOAM etc. during that period, I collected many small/big open source CFD/FEA projects, but few study. 2) Game Engineat 2011, Virtual Reality is attracting CHAI3D: my friend show me a demo, but I didn’t go through LiquidFun: google product Box2D: for fun, like LiquidFun, where cmake, configure skills played That time I also collected many other game engines from web, e.g. Unreal, skynet.. it’s so cool to be a game developer, but no time to deep in 3) Robotat 2014, robot is hot ROS: that’s my way to study the platform first, with a few study and no more SLAM: the cool concept when to uderstand the core algorithm OpenCV: used everywhere, read some docs, but not used independtely Arduino: platform, when I joined the Detroit Hacking Night(DHN) meetup RasiBerry: similar experience during DHN, later I tried to implement deep learning detection algorithm on a race car, not finished till now RTOS: go through like 2-month ago, when I feel I need more understand at embedded system. simple to understand, but not sure how can I master in practice 4) Deep Learningafter 2016, DL is so popular, many frameworks, online courses, papers bursting, no way to keep calm. TensorFlow: I thought it’s easy at first, but really didn’t go to the code, but implemented some examples Caffe: the DL framework jumped in, first knew about Google protocol buffer, very confused at that time ChatAI: I tried to add some fun in WeChat public platform 5) VehicleBuffalo Car simulator: at Buffalo lab, there was a physical car simulator, and code in OSG, cool project to learn C++ SimCar: later I had chance to know many open source/ commercial car simulators AGL: at 2017, started to view AGL updates, try to keep in mind the new trends in vehicle software fields GEVIVI: same time with AGL, interested in IVI as a sub-field openXC, SmartDeviceLink: OEM level apps 6) Web &amp; Mobileat 2017, luckly transfered to a web project, have the chance to know AngularJS, Node.js and event driven, REST, AJAX, async, many new and exciting ideas here. Hexo.io: a static blog engine web crawler: looks like a hack skill async event I/O lib: moduo, event.js top github Rankers have js projects, looks very intersting 7) OS relatedmany little tools when playing with Linux, system level, apps. One big stuff is Linux Process Communication(IPC). I used share memory in one product but never had a chance to know the big picture of IPC, later want to know about Linux network, and see socket, signal… feel connected. CMAKE: QT: Glib: MKL: intel math kernal lib, cool in first impression plugin-pattern in embedded software the good is know diversity, the short I don’t have done any contribution to combine these experince GBM]]></content>
      <tags>
        <tag>open source</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[W3C automotive open web platform]]></title>
    <url>%2F2018%2F05%2F22%2FW3C-automotive-open-web-platform%2F</url>
    <content type="text"><![CDATA[W3C automotive open web platformMain page: Link A clear web framework: 1) define the network communication APIs(based WebSocket protocol); 2) standarlize vehicle data; 3) define APIs to access vehicle data. Vehicle Information Service Specification(VISS)Object: to define WebSocket based APIs for a vehicle information service to enable client apps to get, set, subscribe, unsubscribe to vehicle signals, data attributesLink Vehicle Datadoc Link Object: to define a standard Vehicle Data with might be available in a vehicle 1) VehicleInterface2) VehicleCommonDataType3) VehicleConfigurationInterface (identification, sizeConfiguration, fuelConfiguration, transmissionConfiguration, wheelConfiguration, steeringWheelConfiguration)4) Running Status Interface(vehicleSpeed, wheelSpeed, engineSpeed, vehiclePowerMode, powertrain, acceleratorPedalPosition, throttlePosition, tripMeters, transmission, cruiseControlStatus, lightStatus, interiorLightStatus, horn, chime, fuel, engineOil, acceleration, engineeCoolant, steeringWheel, wheelTick, ignitionTime, gyro, brakeOperation, buttonEvent, drivingStatus, nightMode, startStopMode)5) Maintenance Interfaces(odometer, transmissionOil, transmissionClutch, brakeMaintenance, washerFluid, malfuncitonIndicator, battery Status, Tire, trouble Code, diagnostic)6) Personalization Interfaces ( languageConfiguration, unitsOfMeasures, mirror, driveMode, seatAdjustment, dashboardIllumination, vehicleSound )7) DrivingSafety Interfaces ( antilockBrakingSystem, tractionControlSystem, electroniceStabilitySystem, topSpeedLimit, airbagStatus, door, childSafetyLock, seat)8) Climate Interfaces (temperature, rainSensor, wiperStatus, defrost, sunroof, convertibleRoof, sideWindow, climateControl, atmosphericPressure)9) Vision &amp; Parking Interfaces( laneDepartureDetection, alarm, parkingBrake, parkingSensors) Vehicle Information API SpecificationObject: define a high level API for accessing vehicle signals, data attributes and communicate with in-vehicle data servers doc Link VISClient Interface used to define any on-board, off-board clients VISClientOptions Interface used to define a connection to a vehicle signal server(speicifiable by protocal, host, port) VISSubscription Interface used as return value from subscribed() methods VSS Interface used as return value from getVSS(), which should be sufficent to fully traverse the VSS tree Vehicle Information Access APIdoc Link Object: enable connectivity through in-vehicle infotainment systems and vehicle data access protocols 1) Navigator Interface: exposes the interface to vehicle information services2) Vehicle Interface: the initial entry point to get access to the vehicle information3) Zone interface: physical and logical zones4) VehicleIneterfaceCallback5) AvailableCallback6) VehicleInterfaceError (permission denied, invalid operation, timeout, invalid zone, unknown, error, message)7) VehicleInterface : the base interface to get all vehicle properties8) VehicleCOnfigurationInterface : access to static vehicle information9) VehicleSignalInterface: access to variables vehicle info10) Data Availability : available, not supported, not supported security policy, supported …]]></content>
      <tags>
        <tag>w3c</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[where are you in next 5 years(2)]]></title>
    <url>%2F2018%2F05%2F18%2Fwhere-are-you-in-next-5-years-2%2F</url>
    <content type="text"><![CDATA[the billions level productThink about these guys in the world, who defined products/services used by billions people, they are more than model innovation, but really make a diffrence in most people’s life. e.g. iPhone, facebook, Google, they are not created from nowhere, but went through product iterations by iterations, and they only imerge when the tech, the market, the time all are in perfect. How many people in history achieved here? in any sense, it’s the history choose that person, not that person made history. so take it easy even you are not the 0.01%. in the promising marketmost people in their life time neither can be the next Jobs, nor Bill Gates. that’s the reality, no sad but clean expectation in the end before really in the last day of life. the second goal is easier, find a promising market and lead a small product, maybe lucky invovled in a domain market finally. You are not significant, but one of other 5000 competitors. Even this career path, however, you can’t expect the normal lifestyle: start at 25 and retire at 55 with enough 401K to death. If so, mostly you will be fired out someday in 30s or 40s. Chinese say, “if you dont plan far, you will be in trouble soon” so what may be the promising market subset in automotive software in next 5 years? generally say: 1) service, consulting; 2) self-business; 3)tech expert. in specificly saying: 1) electricity, energy infrastructure; 2) connected, cloud infrastructure; 3) autonomous vehicle.4) mobile apps, which is the carrier for the first 3. I mean the trend is so clear these days. No one can say he dont’ know where should stand in future. but where are you now? I like the model Elon Musk mentioned when do future plan: what’s your reality, what’s your goal, how to meet the gap, than focus on acting. will automotive software like mobile smartphones ?It’s interesting even now there are few third-party or independent “automotive software” companines, on opposite, in mobile market, there are lots of small or big third-party developing companines around Andriod, iOS, the mobile ecosystem is plenty and diversity. the reality in automotive field is lack of abstraction and separation between bottom hardware and top applications. in a mature mobile ecosystem, developer -&gt; end-usersin automotive software ecosystem, devleoper –&gt; OEM –&gt; end-users some auto allience is working on(AutoSAR). as developers, either gain some knowledge in hardware/control to solve the gap, or waiting for the day. what I expect on the way, may be like mobile time:1) automotive OS platform2) vehicle apps3) infrastures extending once the platform is unified, suppose many new auto branchs will emergy. like HTC, Xiaomi, Vivo, Huawei, Lenvo branches after Andriod OS. then new market stratgey is highly required, also traditional OEMs will be heavily impacted. OEM don’t like mobile ecosystemthis may happen soon or never, since OEM don’t like this trend. most possiblely, automotive software developers will highly rely on OEMs. so where will I stand in next 5-years ? OEM is good at strategy study and product integration. at a tech supplier, the benefit is more product driven experience. OEM suppose to have the advantage at automotive platform built-up, but reality is big Internet/software companies with product-level solutions, and OEM doesn’t. it is clear for me in next 5-years to jump into electric, connected, autonomous related industries, either at OEM level or supplier level. Also it is the time to do some study at automotive platform vendors.]]></content>
      <tags>
        <tag>automotive softwares</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[where are you in next 5-years]]></title>
    <url>%2F2018%2F05%2F14%2Fwhere-are-you-in-next-5-years%2F</url>
    <content type="text"><![CDATA[what industry will you be in? in every industry, the product should be the core to define all other supporting teams, the market team, the product design team, IT team, manufacture team etc. so my answer suppose to be vehicle, or maybe I even should not limit here. as an mechanical/mechanics based engieer for three years, I realized there are three aspects: 1 solid knowledge in this special field, e.g. Mechanical has concept of stress, material property; market has concept of supply chain, product strategy, customer expectation; 2 fluent with the industry tools, which give the feeling you can fix the world by it, e.g. CAD/CAE tools to mechanical, programming tools to developers; 3 passion in the product, which is the driven force to explore and creativity. Do I have passion in vehicle? Or Do I feel the pain/hurt due to any unsolved issues in vehicle? maybe no, that’s why I stay in surface even after 3-years, don’t feel the pain neither the fire. knowledge is almost the easist part, which answer “what”, the true barrier is about tools(how) and passion(why). From knowledge level, reading couple professional books will be enough to absolve the concepts in a new acknowledge. career passionBut why you want to involve in this job? most people even don’t go to why, since reality is here: after getting married, pay the house fee, kids taken after. Job is a job, to support family, period. I love family, by the way. but don’t take family as an excuse for muddy career. Is there a field that knowledge is the tool? maybe AI, so far AI products is limited, e.g. voice, image. so tools are highly overlapped with knowledge. It sounds like an easy-in field. for a while as AI maturing and becoming an common service, then AI related products will burst out in every field, then product/market/capital-driven occupy. It’s a bad strategy to chase after market hot topics to develop personal career path. Current market trend is helpful, but there is no clear next-10-year market goal; on personal level, however, you definitely need a clear next 5/10-year goal, then every small adjust should point to that goal. so basically there are two categories: knowledge-driven, which is new coming e.g. AI; market-driven, which is always matured, e.g. automotive, smart phones. I suppose the matured market, if lacking creative input(vey much based on customer needs, market trends), is going to sunset sooner or later; the knowldege-driven market is bursting on the way, and absorving/requiring more and more labors. so where I am now, and where will I be in next 5-year? How do you survive in a matured market, or are you born to be the new-comers? and is the new-comers achievable? e.g. will AI related knowledge/tools be easy to catch? if in a matured market (automotive CAE)if I dont figure out a clear 5-year goal, most possiblely I will stay very unhappy in CAE the next 5 years; also very possible I can’t tolerant the work environemnt any more, and jump to any field at that time accept me; few chance to refresh my opinions and define a CAE sub-market. there are a few concerns. First, it’s not good to change direction immidetialy anytime the market is down, that’s too risk if you don’t setup the long-term goal. Second, in a sunset field, it’s not only about salary not high, the hidden aspects includes scattered office environoment, lay-off dangerous, not been valued, which will change the person into sunset. I mean, even a sunset period still need labers to maintain, but depends on personality, not for me somehow. what may be the CAE sub-market to rise? I can feel the tools is still highly used in automotive fields, but the maturity in CAE software products requires few new development, some new try into autonomous vehicle safety will not be a burst. Another try is in cloud based environment, is more like a sub-applications for the cloud vendors, it’s kind of a pattern innovation, not a product innovation. Due to the fewer chances in mature products, the level of candicates is actually high, most openings requries PhD. the mature market is a employer market, not employees friendly. And the education system may take decades to make a shift, during the period the employee somehow have to be devalued, because of the market decide their values. if in a new market (AI)by all menas, a new market does have more chances and promising futures and all the benifits where the mature market doesn’t have. The point is how to transfer from a mature market employee to a new market employee. I mentioned before, three aspects, knowledge, tools, and passion. Love it first, and the knowledge and familar with tools will achieved. need more discussion in next time.]]></content>
      <tags>
        <tag>CAE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[what happens in automotive softwares]]></title>
    <url>%2F2018%2F05%2F07%2Fwhat-happens-in-automotive-softwares%2F</url>
    <content type="text"><![CDATA[Backgroud:Due to 6-year school experince in mechanics, I was native to jump into CAE position. But I have few willing with CAD, which is very fundemental to be a qualified Product-Design side engineer. so I am not. So I am in a CAE tools support team, where I don’t directly design, mainly in enhancement, deployment etc, where understandthe old code, and write new function code, track bugs, system configure is enough. even in the big CAE vendors companies(Altair, Dassult System), the new methodlogy invest is very possibly less than product integration and customer consultings. what’s changing:the trend of CAE tools in OEMs demenstrates less investment, not because CAE tools are less used, but the CAE methodlodgy/process is really mature; new trends are arising, e.g. connected vehicles(CV), smart city, autonomous vehicles(AV), all of which require different knowledge and mindset(from mechanical to EE/CS). In 2017 Sep, I enrolled Udacity self-driving car, which gave some knowledge(openCV, deep learning, data fusion, object detect, plan algorithm), and the problems in AV. This field is so hot that openings around everywhere, basically California companies are high-demand, looking for a strong guy, AI expert, or senior automotiveengineer; while Michigan companies are old fasion, more on system integration level, and the required skills are random. if it’s a turning pointwhile Udacity didn’t work for me and AV is too young to all-in invest.For a while I am actually back to CAE, tried to enjoy it. But bad news keep coming, less projects funded, and frustrated office environment, so I move on. this time, IoT(connected vehicles) come to mind. it is really an old topic, since 2008 at college, IBM throw the big vision: smart earth to connect everything. Decades passed, finally the infrastructure, the application levels(transport, home, offices) are prepared-well. Good for me, I track AGL, GENIVI open source projects for around a year already and had 8-months experience in mobile developement(RESTful, server-client model), all bring me some fresh idea in connected vehicles. To study the automotive embedded software system, I tracked freeRTOS first, cause it’s easy since knowldege in Linux; about applications based on RTOS, however, I have no idea, e.g. vehicle dynamics, body/engine/powertrain control components, sensors, algorithms. While they are new but not difficult, hopefully can be familar in short period. softwares in connected vehiclesThere are two sections: the vehicle development, including traditional control components, which requires professional knowledge in vehicle dynamics, ECU; Vehicle Infotainment(IVI)components, which is like mobile developement. this section already has standard architecture, e.g. AutoSar secondly the vehicle to surroundings, either cloud device, peronsal mobile devices, or other vehicles. which requires: cloud infrastructures, communication protocol, security vendors, Android/IOS mobile apps, and IoT hardware vendors. it’s a clear big market, also it presents more valuable to do business than to be an engineer in each small field. the reasons come to mind, 1)architecture is done, no big mind/theory updated ; 2) so all should be about products, the integration components to market products is virtual. on-goingCAE softwares is heavy-math/numerical algorithms demanding; on the other side, embedded softwares is like enterprise Java, more on logic flow. As the population of mobile frameworks, and standarlization in automotive embedded system, the threshold suppose become lower. On the other hand, the dependence on suppliers’ libs and the test/release on hardwares may draw the life cycle of embedded software development longer. To explore embedded softwares may not the right career path, but no doubt it’s good to know what’s happening there. Finally, Either embrace the changing or wait it come to you, I mean, both are good stragies, maybe!]]></content>
      <tags>
        <tag>automotive embedded software</tag>
        <tag>CAE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[open source car control]]></title>
    <url>%2F2017%2F09%2F05%2Fopen-source-car-control%2F</url>
    <content type="text"><![CDATA[OSCC Introgithub it’s a modular using software to interface with a vehicle’s communication network and control systems. functions: to send control commands to the vehicle, read control messages from the vehicle’s OBD-II CAN network,f and forward reports for current vehicle control state (e.g. steering angle, wheel speed) sensors: steerng wheel torque sensor, throttle position sensor, brake position sensor issues: not safe for spoofing CAN message, or hacking firmware &amp; hardwareapplication layer (API)]]></content>
      <tags>
        <tag>open source</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MIT 6.S094 Deep Learning for Self Driving Cars]]></title>
    <url>%2F2017%2F08%2F07%2FMIT-s094%2F</url>
    <content type="text"><![CDATA[1 Deep Reinforcement Learning linkapps: motion planning 2 Convolutional Neural Networks linkapps: End-2-end driving task(pedestrian detect) 3 Recurrent Neural Networks linkapps: steering control through time CNN Project: DeepTeslaDRL Project: DeepTrafficFramework: ConvNetJS]]></content>
      <tags>
        <tag>Open course</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cs231 -- CNN in computer vision]]></title>
    <url>%2F2017%2F07%2F24%2FCNN-demo%2F</url>
    <content type="text"><![CDATA[what happend in high dimensional space?Pixel-based distance on high-dimensional data can be very unintuitive. Linear Classification1) define a score function from image pixels to class scores. benefits, no need to store all data 2) SVM and Softmax 3) a loss function, measure the quality of a paricular set of parameters based on how well the induced scores agreed with the ground truth labels optimization (SGD)the loss function as a hihg-dimeonsional optimization landscape, in which trying to reach the bottom BPRectified linear unit (ReLU)Neural Networkstrain a small network, the final loss are relatively few local minima, and easy to converge, but they are high loss; if train large network, there may many different solutions, but the variance in final loss is much smaller. –&gt; all solutions are equally as good, rely less on the random initialization in practice, use regularization tech to control overfit on large train network Data Preprocessing1) mean subtraction 2) normalization 3) PCA &amp; whitening 4) weight initialization 5) regularization 5.1) L-norm regularization 5.2) Dropout Hyperparamter optimization1) initial learning rate 2) learning rate decay schedule 3) regularization strength (L2 penalty) tips: decay learning rate over the period of training; search for good hyperparameters with random search CNNlayers used to build ConvNet architectures: 1) Convolutional layer 2) ReLU layer 3) Pooling layer 4) Fully-connected layer case study: LeNet AlexNet ZF Net GoogleNet VGGNet ResNet Visulization CNNTransfer learning]]></content>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
</search>